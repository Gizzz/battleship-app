{"version":3,"sources":["components/Board/Board.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["cellStates","alive","damaged","dead","miss","unknown","Board","initialState","ships","positions","missedPositions","state","_this","createCellClickHandler","rowIndex","colIndex","xPos","yPos","isUserMissed","newShips","JSON","parse","stringify","map","ship","Object","objectSpread","pos","isPositionClicked","newMissedPositions","toConsumableArray","currentPosition","isMissedPositionExists","push","setState","computeGameover","setTimeout","alert","positionParam","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","position","value","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","computeBoard","board","i","row","j","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","isShipAlive","reduce","acc","curr","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","isCellAlive","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_this2","this","computedBoard","rowsJsx","_loop","colsJsx","cellState","modifierClass","react_default","a","createElement","className","concat","key","onClick","rowJsx","length","React","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.438a4cbf.chunk.js","sourcesContent":["import React from 'react';\nimport './Board.css';\n\nconst cellStates = {\n  alive: '+',\n  damaged: '*',\n  dead: 'x',\n  miss: '-',\n  unknown: '?',\n};\n\nclass Board extends React.Component {\n  initialState = {\n    ships: [\n      { positions: [[2,9,1], [3,9,1], [4,9,1], [5,9,1], [6,9,1]] },\n      { positions: [[5,2,1], [5,3,1], [5,4,1], [5,5,1]] },\n      { positions: [[8,1,1], [8,2,1], [8,3,1]] },\n      { positions: [[3,0,1], [3,1,1], [3,2,1]] },\n      { positions: [[0,0,1], [1,0,1]] },\n    ],\n    missedPositions: [],\n  }\n\n  state = this.initialState\n\n  createCellClickHandler = (rowIndex, colIndex) => {\n    return () => {\n      const xPos = colIndex;\n      const yPos = rowIndex;\n\n      let isUserMissed = true;\n      const shipsCopy = JSON.parse(JSON.stringify(this.state.ships));\n      const newShips = shipsCopy.map((ship) => {\n        return {\n          ...ship,\n          positions: ship.positions.map((pos) => {\n            const isPositionClicked = pos[0] === xPos && pos[1] === yPos;\n            if (isPositionClicked) {\n              isUserMissed = false;\n            }\n\n            return isPositionClicked ? [pos[0], pos[1], 0] : pos;\n          }),\n        };\n      });\n\n      const newMissedPositions = [...this.state.missedPositions];\n      const currentPosition = [colIndex, rowIndex];\n      if (isUserMissed && !this.isMissedPositionExists(currentPosition)) {\n        newMissedPositions.push([xPos, yPos]);\n      }\n\n      this.setState({ ships: newShips, missedPositions: newMissedPositions }, () => {\n        if (this.computeGameover()) {\n          // fire callback in next tick to let React perform render\n          setTimeout(() => {\n            alert('Game is over. Let\\'s start again!');\n            this.setState({ ...this.initialState });\n          }, 10);\n        }\n      });\n    };\n  }\n\n  isMissedPositionExists = (positionParam) => {\n    for (let position of this.state.missedPositions) {\n      if (position[0] === positionParam[0] && position[1] === positionParam[1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  computeGameover = () => {\n    for (let ship of this.state.ships) {\n      for (let position of ship.positions) {\n        const isCellAlive = position[2] === 1;\n        if (isCellAlive) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  computeBoard = () => {\n    const board = [];\n    const boardSize = 10;\n\n    for (let i = 0; i < boardSize; i++) {\n      const row = [];\n\n      for (let j = 0; j < boardSize; j++) {\n        row.push(cellStates.unknown);\n      }\n\n      board.push(row);\n    }\n\n    for (let ship of this.state.ships) {\n      const isShipAlive = ship.positions.reduce((acc, curr) => {\n        if (acc === true) {\n          return true;\n        }\n\n        const position = curr;\n        const isCellDead = position[2] === 0;\n\n        return isCellDead ? false : true;\n      }, false);\n\n      for (let position of ship.positions) {\n        const rowIndex = position[1];\n        const colIndex = position[0];\n        const isCellAlive = position[2] === 1;\n        board[rowIndex][colIndex] =\n          isCellAlive ? cellStates.alive :\n          isShipAlive ? cellStates.damaged :\n          cellStates.dead;\n      }\n    }\n\n    for (let position of this.state.missedPositions) {\n      const rowIndex = position[1];\n      const colIndex = position[0];\n      board[rowIndex][colIndex] = cellStates.miss;\n    }\n\n    return board;\n  }\n\n  render() {\n    const computedBoard = this.computeBoard();\n    const rowsJsx = [];\n\n    for (let rowIndex = 0; rowIndex < computedBoard.length; rowIndex++) {\n      const row = computedBoard[rowIndex];\n      const colsJsx = row.map((cellState, colIndex) => {\n        const modifierClass =\n          cellState === cellStates.miss ? 'board__cell--miss' :\n          cellState === cellStates.damaged ? 'board__cell--damaged' :\n          cellState === cellStates.dead ? 'board__cell--dead' :\n          'board__cell--unknown';\n\n        return (\n          <div\n            className={`board__cell ${modifierClass}`}\n            key={colIndex}\n            onClick={this.createCellClickHandler(rowIndex, colIndex)}\n          >\n            {\n              cellState === cellStates.miss ? '-' :\n              cellState === cellStates.damaged ? '*' :\n              cellState === cellStates.dead ? 'x' :\n              '?'\n            }\n          </div>\n        );\n      });\n\n      const rowJsx = (<div className=\"board__row\" key={rowIndex}>{colsJsx}</div>);\n      rowsJsx.push(rowJsx);\n    }\n\n    return (\n      <div className=\"board\">\n        {rowsJsx}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import Board from './Board';\n\nexport default Board;","import React, { Component } from 'react';\n\nimport Board from './components/Board';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__title\">Battleship App</h1>\n        <p className=\"app__descr\">Search and destroy all enemy ships by clicking on tiles of the board.</p>\n        <div className=\"app__board\">\n          <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}